rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthed() { return request.auth != null; }
    function isOwner(uid) { return isAuthed() && request.auth.uid == uid; }
    function userDoc(uid){ return get(/databases/$(database)/documents/users/$(uid)); }
    function hasRole(roles){ return isAuthed() && (userDoc(request.auth.uid).data.role in roles); }

    match /users/{uid} {
      allow read: if isAuthed();
      allow write: if isOwner(uid);
    }

    match /leagues/{id} {
      allow read: if true;
      allow create: if hasRole(['organizer','admin']);
      allow update, delete: if resource.data.adminUid == request.auth.uid || hasRole(['admin']);
    }

    match /posts/{id} {
      allow read: if true;
      allow create: if isAuthed() && request.resource.data.uid == request.auth.uid;
      allow update, delete: if resource.data.uid == request.auth.uid || hasRole(['mod','admin']);
    }

    match /reels/{id} {
      allow read: if true;
      allow create: if isAuthed() && request.resource.data.uid == request.auth.uid;
      allow update, delete: if resource.data.uid == request.auth.uid || hasRole(['mod','admin']);
    }

    match /challenges/{cid} {
      allow read: if true;
      allow create: if isAuthed() && request.resource.data.creatorUid == request.auth.uid;
      allow update, delete: if resource.data.creatorUid == request.auth.uid || hasRole(['mod','admin']);
    }

    match /challenges/{cid}/attempts/{uid} {
      allow read: if true;
      allow create: if isOwner(uid);
      allow update, delete: if isOwner(uid) && resource.data.status == 'pending';
    }

    match /challenges/{cid}/validations/{vid} {
      allow read: if true;
      allow create: if hasRole(['organizer','mod','admin']) && request.resource.data.validatorUid == request.auth.uid;
    }

    match /matches/{id} {
      allow read: if true;
      allow create: if isAuthed();
      allow update, delete: if isAuthed();
    }

    match /wallets/{uid} { 
      allow read, write: if isOwner(uid); 
    }
    
    match /bets/{id} {
      allow read: if isAuthed() && request.auth.uid == resource.data.uid;
      allow create: if isAuthed() && request.resource.data.uid == request.auth.uid;
      allow update, delete: if false; // s√≥lo Functions liquidan
    }

    match /reports/{id} {
      allow create: if isAuthed() && request.resource.data.reporterUid == request.auth.uid;
      allow read: if hasRole(['mod','admin']) || resource.data.reporterUid == request.auth.uid;
      allow update: if hasRole(['mod','admin']);
    }
  }
}
